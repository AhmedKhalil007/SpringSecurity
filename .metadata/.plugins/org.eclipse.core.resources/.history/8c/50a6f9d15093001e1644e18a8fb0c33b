package com.khalil.security.service;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import
org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.khalil.security.entities.Role;
import com.khalil.security.entities.User;
import com.khalil.security.repos.RoleRepository;
import com.khalil.security.repos.UserRepository;

@Transactional
@Service

public class UserServicempl implements UserService{
@Autowired
UserRepository userRep;
@Autowired
RoleRepository roleRep;
@Autowired
BCryptPasswordEncoder bCryptPasswordEncoder;//pour crypter le mot de passe
@Override
public User saveUser(User user) {
    // Vérifier que le mot de passe n'est pas nul avant de l'encoder
    if (user.getPassword() != null) {
        user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
    }
    return userRep.save(user);
}
@SuppressWarnings("unchecked")
@Override
public User addRoleToUser(String username, String rolename) {
    User user = userRep.findByUsername(username);

    // Vérifier que l'utilisateur existe avant de continuer
    if (user != null) {
        Role role = roleRep.findByRole(rolename);

        // Ensure that getRoles() returns a Set<Role>
        user.getRoles().add(role);

        return userRep.save(user);
    }

    return null; // Ou lancez une exception appropriée si nécessaire
}
@Override
public Role addRole(Role role) {
return roleRep.save(role);
}
@Override
public User findUserByUsername(String username) {
return userRep.findByUsername(username);
}
}